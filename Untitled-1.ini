# Plan Definitivo: HealthCast Control System

**Este documento es la guía completa y definitiva para el desarrollo, despliegue y operación del sistema HealthCast Control System, un sistema multiplataforma y modular para la señalización digital en clínicas y redes de salud.**

---

## 1. Visión y Objetivos

**Visión**: Crear la solución más profesional, escalable y segura para gestionar contenido multimedia (turnos, anuncios, IPTV, campañas, alertas) en múltiples TVs de clínicas, hospitales y centros de salud.

**Objetivos**:

1. Centralizar la gestión de contenido y dispositivos.
2. Ofrecer versión gratuita local y versión Pro con acceso remoto y herramientas avanzadas.
3. Garantizar alta disponibilidad, rendimiento y seguridad.
4. Permitir integración con sistemas externos (HIS, ERP, CRMs) y notificaciones multicanal.
5. Facilitar mantenimiento, monitoreo y escalabilidad horizontal.

---

## 2. Alcance y Funcionalidades Principales

### 2.1 Versión Gratis (On‑Premise)

* **Gestión ilimitada de TVs** con ChromeCast, Android TV, Fire TV, Smart TV.
* **Control de contenido**: IPTV (M3U/M3U8), videos (MP4/H264), imágenes (JPG/PNG/GIF), textos dinámicos.
* **Programación básica**: perfiles por TV, horario diario (7am‑6pm), fallback automático.
* **Panel Web local**: React + TailwindCSS, dashboard, tarjetas por TV, logs locales, editor de perfiles.
* **Modo TV**: interfaz minimalista HTML5 para dispositivos sin ChromeCast.
* **Automatización**: APScheduler para tareas periódicas, backup diario local.
* **Seguridad básica**: Flask-Login, contraseñas hashed, HTTPS local opcional.

### 2.2 Versión Pro (Suscripción)

* **Acceso remoto seguro**: Cloudflare Tunnel / Tailscale preconfigurado.
* **Notificaciones avanzadas**: Telegram Bot + WhatsApp Business API.
* **Backup en la nube**: Google Drive, Dropbox o S3 via Rclone.
* **Control remoto técnico**: ADB Wireless, Anydesk Quick Launch, Wake-on-LAN.
* **Estadísticas y reportes**: dashboard de métricas, heatmaps, PDF automático.
* **Integraciones externas**: Google Calendar, Google Sheets, APIs webhook.
* **Seguridad Pro**: OAuth2 (Google/Microsoft), 2FA, RBAC granular.

---

## 3. Arquitectura General

```
                                
      +----------------+       +-----------------+      +----------------+
      |    Frontend    | <---> |  API Gateway    | <--> |  Microservicios |
      |  (React/Vite)  |       | (FastAPI/Flask) |      |  Go / Rust     |
      +----------------+       +-----------------+      +----------------+
             |                        |                        |
             v                        v                        v
      +-------------+         +-------------+          +-------------+
      |  PostgreSQL |         |    Redis    |          |   Minio     |
      +-------------+         +-------------+          +-------------+
             ^                        ^                        ^
             |                        |                        |
      +---------------------------------------------------------------+
      |                    Infraestructura Docker / K8s              |
      +---------------------------------------------------------------+

```

**Componentes**:

* **Frontend**: React + TailwindCSS, Vite, Zustand/Redux, Shadcn/UI, Framer Motion.
* **API Gateway**: FastAPI para endpoints públicos y proxies, Flask para lógica interna de control.
* **Microservicios**:

  * **Control TV**: Python (pychromecast, adb-shell).
  * **Streaming IPTV**: Go + FFmpeg para HLS.
  * **Notificaciones**: Python (python-telegram-bot, Twilio).
  * **Métricas**: Rust para procesamiento de logs y generación de reportes.
* **Almacenamiento**: PostgreSQL 15, Redis (cache, pub/sub), Minio (objetos multimedia).
* **Infraestructura**: Docker Compose para desarrollo; Kubernetes (K3s) para producción.

---

## 4. Tecnologías y Herramientas por Módulo

| Módulo                     | Lenguaje / Tech Stack                   | Descripción                                                                 |
| -------------------------- | --------------------------------------- | --------------------------------------------------------------------------- |
| **Frontend Web**           | React, Vite, TailwindCSS, Shadcn/UI     | Dashboard responsive, edición visual, control en tiempo real, modo oscuro   |
| **API Gateway**            | FastAPI (Python), Uvicorn               | Autenticación, enrutamiento, validación, documentación OpenAPI              |
| **Control de TV**          | Python 3.12, pychromecast, adb-shell    | Descubrimiento, casting, comandos ADB, capturas, fallback                   |
| **Streaming IPTV**         | Go 1.20, FFmpeg, HLS                    | Servidor de streams con reconexión, transcodificación y fallback automático |
| **Automatización**         | Python, APScheduler                     | Tareas programadas: rotación, chequeo de dispositivos, backups              |
| **Notificaciones**         | Python, python-telegram-bot, Twilio API | Alertas proactivas por Telegram y WhatsApp, webhook configurables           |
| **Base de datos**          | PostgreSQL 15                           | Datos relacionales: usuarios, roles, TVs, perfiles, logs, métricas          |
| **Cache & PubSub**         | Redis                                   | Cache de respuestas, canalizaciones WebSocket, locking                      |
| **Almacenamiento objetos** | Minio (S3 API)                          | Almacenamiento de multimedia y backups                                      |
| **App Móvil**              | Flutter                                 | Multiplataforma iOS/Android, notificaciones push FCM, deep links            |
| **Seguridad**              | OAuth2, JWT, TOTP, WireGuard            | Autenticación social, 2FA, VPN interna para Pro                             |
| **CI/CD**                  | GitHub Actions, Docker Hub              | Pipelines de build/test/deploy, escaneo de vulnerabilidades (Trivy, Bandit) |
| **Monitor & Logs**         | Prometheus, Grafana, ELK (Loki/Fluentd) | Métricas de sistema y aplicación, logs estructurados, alertas de salud      |

---

## 5. Estructura del Proyecto

```
HealthCast-Control/
├── backend/                # API Gateway y microservicios Python
│   ├── app/
│   │   ├── __init__.py
│   │   ├── main.py          # FastAPI entrypoint
│   │   ├── controllers/     # Endpoints por dominio
│   │   ├── services/        # Lógica de negocio
│   │   ├── models/          # SQLAlchemy models
│   │   └── utils/           # Helpers, seguridad, logging
│   ├── Dockerfile
│   └── requirements.txt
├── services/               # Microservicios especializados
│   ├── tv_control/         # Python pychromecast + adb
│   ├── iptv_stream/        # Go + FFmpeg server
│   ├── notifier/           # Python Telegram/Twilio
│   └── metrics_processor/  # Rust microservicio para reportes
├── frontend/               # Panel React
│   ├── public/
│   ├── src/
│   │   ├── components/
│   │   ├── pages/
│   │   ├── store/
│   │   └── assets/
│   ├── Dockerfile
│   └── package.json
├── mobile/                 # App Flutter
│   ├── lib/
│   ├── android/
│   └── ios/
├── infra/                  # Infraestructura as Code
│   ├── docker-compose.yml
│   ├── k8s/
│   └── terraform/          # (opcional, para nube)
├── docs/                   # Documentación del proyecto
│   ├── architecture.md
│   ├── user_manual.md
│   └── api_reference.md
└── README.md
```

---

## 6. Plan de Desarrollo Detallado (Cronograma)

| Fase | Descripción                                                              | Duración  | Responsible    |
| ---- | ------------------------------------------------------------------------ | --------- | -------------- |
| 1    | **Diseño UX/UI & Arquitectura**: mockups, diagramas, setup repositorios  | 2 semanas | Equipo diseño  |
| 2    | **API Gateway**: FastAPI setup, JWT, Swagger, DB migrations, modelos     | 3 semanas | Backend Team   |
| 3    | **Microservicio TV Control**: pychromecast, ADB, tests locales           | 2 semanas | Backend Team   |
| 4    | **Microservicio IPTV**: Go + FFmpeg, HLS, reconexión                     | 2 semanas | DevOps / Go    |
| 5    | **Base de datos & Cache**: PostgreSQL, Redis, scripts de inicialización  | 1 semana  | DB Admin       |
| 6    | **Dashboard Frontend**: React, routing, autenticación, UI cards          | 4 semanas | Frontend Team  |
| 7    | **Integración Backend-Frontend**: WebSocket, Axios, pruebas E2E          | 2 semanas | Fullstack      |
| 8    | **Notificaciones & Alertas**: Telegram, WhatsApp, panel de configuración | 2 semanas | Backend Team   |
| 9    | **App Móvil**: Flutter setup, login, notificaciones push                 | 3 semanas | Mobile Team    |
| 10   | **Seguridad & Hardening**: OAuth2, 2FA, HTTPS, VPN, escaneo              | 2 semanas | SecOps         |
| 11   | **Monitor & Logs**: Prometheus, Grafana dashboards, ELK setup            | 2 semanas | DevOps Team    |
| 12   | **CI/CD & Infraestructura**: pipelines, Docker Compose, k8s manifests    | 1 semana  | DevOps Team    |
| 13   | **Pruebas & QA**: unit tests, integración, carga, usabilidad             | 2 semanas | QA Team        |
| 14   | **Piloto & Feedback**: despliegue en cliente, recopilación de bugs       | 2 semanas | Support Team   |
| 15   | **Documentación & Formación**: manuales, guías, workshops para usuarios  | 1 semana  | Tech Writer    |
| 16   | **Lanzamiento & Soporte**: versión 1.0, marketing materiales, SLA        | 1 semana  | PM / Marketing |

---

## 7. Mejora Continua y Futuras Extensiones

* **Integración IoT**: sensores de presencia, control de climatización.
* **Reconocimiento facial**: mostrar turnos automáticamente al reconocer al paciente.
* **IA de recomendación**: sugerir contenido según patrones de uso.
* **Modo analítico avanzado**: ML para detectar anomalías en streams.
* **Marketplace de canales**: permitir a terceros publicar contenido patrocinado.

---

**Este plan es la referencia maestra para todo el equipo**. Cualquier cambio deberá documentarse en `docs/CHANGELOG.md` y aprobarse vía pull request con revisiones de código y pruebas. ¡A desarrollar!
